// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Serializer

import (
	"strconv"

	flatbuffers "github.com/google/flatbuffers/go"
)

type DataType byte

const (
	DataTypeNONE         DataType = 0
	DataTypeStringList   DataType = 1
	DataTypeMutationData DataType = 2
)

var EnumNamesDataType = map[DataType]string{
	DataTypeNONE:         "NONE",
	DataTypeStringList:   "StringList",
	DataTypeMutationData: "MutationData",
}

var EnumValuesDataType = map[string]DataType{
	"NONE":         DataTypeNONE,
	"StringList":   DataTypeStringList,
	"MutationData": DataTypeMutationData,
}

func (v DataType) String() string {
	if s, ok := EnumNamesDataType[v]; ok {
		return s
	}
	return "DataType(" + strconv.FormatInt(int64(v), 10) + ")"
}

type DataTypeT struct {
	Type  DataType
	Value interface{}
}

func (t *DataTypeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case DataTypeStringList:
		return t.Value.(*StringListT).Pack(builder)
	case DataTypeMutationData:
		return t.Value.(*MutationDataT).Pack(builder)
	}
	return 0
}

func (rcv DataType) UnPack(table flatbuffers.Table) *DataTypeT {
	switch rcv {
	case DataTypeStringList:
		x := StringList{_tab: table}
		return &DataTypeT{Type: DataTypeStringList, Value: x.UnPack()}
	case DataTypeMutationData:
		x := MutationData{_tab: table}
		return &DataTypeT{Type: DataTypeMutationData, Value: x.UnPack()}
	}
	return nil
}
