// automatically generated by the FlatBuffers compiler, do not modify

package Serializer;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Event extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static Event getRootAsEvent(ByteBuffer _bb) { return getRootAsEvent(_bb, new Event()); }
  public static Event getRootAsEvent(ByteBuffer _bb, Event obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Event __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short action() { int o = __offset(4); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public byte dataType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table data(Table obj) { int o = __offset(8); return o != 0 ? __union(obj, o + bb_pos) : null; }
  public boolean shouldCensor() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public String windowId() { int o = __offset(12); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer windowIdAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public ByteBuffer windowIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 12, 1); }
  public long sequence() { int o = __offset(14); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int sequenceIndex() { int o = __offset(16); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String parentWindowId() { int o = __offset(18); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer parentWindowIdAsByteBuffer() { return __vector_as_bytebuffer(18, 1); }
  public ByteBuffer parentWindowIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 18, 1); }

  public static int createEvent(FlatBufferBuilder builder,
      short action,
      byte data_type,
      int dataOffset,
      boolean shouldCensor,
      int windowIdOffset,
      long sequence,
      int sequenceIndex,
      int parentWindowIdOffset) {
    builder.startTable(8);
    Event.addSequence(builder, sequence);
    Event.addParentWindowId(builder, parentWindowIdOffset);
    Event.addSequenceIndex(builder, sequenceIndex);
    Event.addWindowId(builder, windowIdOffset);
    Event.addData(builder, dataOffset);
    Event.addAction(builder, action);
    Event.addShouldCensor(builder, shouldCensor);
    Event.addDataType(builder, data_type);
    return Event.endEvent(builder);
  }

  public static void startEvent(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addAction(FlatBufferBuilder builder, short action) { builder.addShort(0, action, 0); }
  public static void addDataType(FlatBufferBuilder builder, byte dataType) { builder.addByte(1, dataType, 0); }
  public static void addData(FlatBufferBuilder builder, int dataOffset) { builder.addOffset(2, dataOffset, 0); }
  public static void addShouldCensor(FlatBufferBuilder builder, boolean shouldCensor) { builder.addBoolean(3, shouldCensor, false); }
  public static void addWindowId(FlatBufferBuilder builder, int windowIdOffset) { builder.addOffset(4, windowIdOffset, 0); }
  public static void addSequence(FlatBufferBuilder builder, long sequence) { builder.addLong(5, sequence, 0L); }
  public static void addSequenceIndex(FlatBufferBuilder builder, int sequenceIndex) { builder.addInt(6, sequenceIndex, 0); }
  public static void addParentWindowId(FlatBufferBuilder builder, int parentWindowIdOffset) { builder.addOffset(7, parentWindowIdOffset, 0); }
  public static int endEvent(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 8);  // data
    builder.required(o, 12);  // windowId
    return o;
  }
  public static void finishEventBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedEventBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Event get(int j) { return get(new Event(), j); }
    public Event get(Event obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

