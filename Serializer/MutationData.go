// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Serializer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MutationDataT struct {
	Removed    []int32
	Attributes []*StringListT
	Text       []*StringListT
}

func (t *MutationDataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	removedOffset := flatbuffers.UOffsetT(0)
	if t.Removed != nil {
		removedLength := len(t.Removed)
		MutationDataStartRemovedVector(builder, removedLength)
		for j := removedLength - 1; j >= 0; j-- {
			builder.PrependInt32(t.Removed[j])
		}
		removedOffset = builder.EndVector(removedLength)
	}
	attributesOffset := flatbuffers.UOffsetT(0)
	if t.Attributes != nil {
		attributesLength := len(t.Attributes)
		attributesOffsets := make([]flatbuffers.UOffsetT, attributesLength)
		for j := 0; j < attributesLength; j++ {
			attributesOffsets[j] = t.Attributes[j].Pack(builder)
		}
		MutationDataStartAttributesVector(builder, attributesLength)
		for j := attributesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(attributesOffsets[j])
		}
		attributesOffset = builder.EndVector(attributesLength)
	}
	textOffset := flatbuffers.UOffsetT(0)
	if t.Text != nil {
		textLength := len(t.Text)
		textOffsets := make([]flatbuffers.UOffsetT, textLength)
		for j := 0; j < textLength; j++ {
			textOffsets[j] = t.Text[j].Pack(builder)
		}
		MutationDataStartTextVector(builder, textLength)
		for j := textLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(textOffsets[j])
		}
		textOffset = builder.EndVector(textLength)
	}
	MutationDataStart(builder)
	MutationDataAddRemoved(builder, removedOffset)
	MutationDataAddAttributes(builder, attributesOffset)
	MutationDataAddText(builder, textOffset)
	return MutationDataEnd(builder)
}

func (rcv *MutationData) UnPackTo(t *MutationDataT) {
	removedLength := rcv.RemovedLength()
	t.Removed = make([]int32, removedLength)
	for j := 0; j < removedLength; j++ {
		t.Removed[j] = rcv.Removed(j)
	}
	attributesLength := rcv.AttributesLength()
	t.Attributes = make([]*StringListT, attributesLength)
	for j := 0; j < attributesLength; j++ {
		x := StringList{}
		rcv.Attributes(&x, j)
		t.Attributes[j] = x.UnPack()
	}
	textLength := rcv.TextLength()
	t.Text = make([]*StringListT, textLength)
	for j := 0; j < textLength; j++ {
		x := StringList{}
		rcv.Text(&x, j)
		t.Text[j] = x.UnPack()
	}
}

func (rcv *MutationData) UnPack() *MutationDataT {
	if rcv == nil {
		return nil
	}
	t := &MutationDataT{}
	rcv.UnPackTo(t)
	return t
}

type MutationData struct {
	_tab flatbuffers.Table
}

func GetRootAsMutationData(buf []byte, offset flatbuffers.UOffsetT) *MutationData {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MutationData{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MutationData) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MutationData) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MutationData) Removed(j int) int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetInt32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *MutationData) RemovedLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MutationData) MutateRemoved(j int, n int32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateInt32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *MutationData) Attributes(obj *StringList, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MutationData) AttributesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *MutationData) Text(obj *StringList, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *MutationData) TextLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func MutationDataStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func MutationDataAddRemoved(builder *flatbuffers.Builder, removed flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(removed), 0)
}
func MutationDataStartRemovedVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MutationDataAddAttributes(builder *flatbuffers.Builder, attributes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(attributes), 0)
}
func MutationDataStartAttributesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MutationDataAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(text), 0)
}
func MutationDataStartTextVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func MutationDataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
