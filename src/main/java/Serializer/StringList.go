// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Serializer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StringListT struct {
	Values []string
}

func (t *StringListT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	valuesOffset := flatbuffers.UOffsetT(0)
	if t.Values != nil {
		valuesLength := len(t.Values)
		valuesOffsets := make([]flatbuffers.UOffsetT, valuesLength)
		for j := 0; j < valuesLength; j++ {
			valuesOffsets[j] = builder.CreateString(t.Values[j])
		}
		StringListStartValuesVector(builder, valuesLength)
		for j := valuesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(valuesOffsets[j])
		}
		valuesOffset = builder.EndVector(valuesLength)
	}
	StringListStart(builder)
	StringListAddValues(builder, valuesOffset)
	return StringListEnd(builder)
}

func (rcv *StringList) UnPackTo(t *StringListT) {
	valuesLength := rcv.ValuesLength()
	t.Values = make([]string, valuesLength)
	for j := 0; j < valuesLength; j++ {
		t.Values[j] = string(rcv.Values(j))
	}
}

func (rcv *StringList) UnPack() *StringListT {
	if rcv == nil {
		return nil
	}
	t := &StringListT{}
	rcv.UnPackTo(t)
	return t
}

type StringList struct {
	_tab flatbuffers.Table
}

func GetRootAsStringList(buf []byte, offset flatbuffers.UOffsetT) *StringList {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StringList{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *StringList) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StringList) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StringList) Values(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *StringList) ValuesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func StringListStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func StringListAddValues(builder *flatbuffers.Builder, values flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(values), 0)
}
func StringListStartValuesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StringListEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
