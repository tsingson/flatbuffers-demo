// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package Serializer

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type EventT struct {
	Action         Action
	Data           *DataTypeT
	ShouldCensor   bool
	WindowId       string
	Sequence       int64
	SequenceIndex  int32
	ParentWindowId string
}

func (t *EventT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	dataOffset := t.Data.Pack(builder)

	windowIdOffset := builder.CreateString(t.WindowId)
	parentWindowIdOffset := builder.CreateString(t.ParentWindowId)
	EventStart(builder)
	EventAddAction(builder, t.Action)
	if t.Data != nil {
		EventAddDataType(builder, t.Data.Type)
	}
	EventAddData(builder, dataOffset)
	EventAddShouldCensor(builder, t.ShouldCensor)
	EventAddWindowId(builder, windowIdOffset)
	EventAddSequence(builder, t.Sequence)
	EventAddSequenceIndex(builder, t.SequenceIndex)
	EventAddParentWindowId(builder, parentWindowIdOffset)
	return EventEnd(builder)
}

func (rcv *Event) UnPackTo(t *EventT) {
	t.Action = rcv.Action()
	dataTable := flatbuffers.Table{}
	if rcv.Data(&dataTable) {
		t.Data = rcv.DataType().UnPack(dataTable)
	}
	t.ShouldCensor = rcv.ShouldCensor()
	t.WindowId = string(rcv.WindowId())
	t.Sequence = rcv.Sequence()
	t.SequenceIndex = rcv.SequenceIndex()
	t.ParentWindowId = string(rcv.ParentWindowId())
}

func (rcv *Event) UnPack() *EventT {
	if rcv == nil {
		return nil
	}
	t := &EventT{}
	rcv.UnPackTo(t)
	return t
}

type Event struct {
	_tab flatbuffers.Table
}

func GetRootAsEvent(buf []byte, offset flatbuffers.UOffsetT) *Event {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Event{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Event) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Event) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Event) Action() Action {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Action(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Event) MutateAction(n Action) bool {
	return rcv._tab.MutateInt16Slot(4, int16(n))
}

func (rcv *Event) DataType() DataType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return DataType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Event) MutateDataType(n DataType) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *Event) Data(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *Event) ShouldCensor() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *Event) MutateShouldCensor(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func (rcv *Event) WindowId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Event) Sequence() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Event) MutateSequence(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func (rcv *Event) SequenceIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Event) MutateSequenceIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(16, n)
}

func (rcv *Event) ParentWindowId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func EventStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func EventAddAction(builder *flatbuffers.Builder, action Action) {
	builder.PrependInt16Slot(0, int16(action), 0)
}
func EventAddDataType(builder *flatbuffers.Builder, dataType DataType) {
	builder.PrependByteSlot(1, byte(dataType), 0)
}
func EventAddData(builder *flatbuffers.Builder, data flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(data), 0)
}
func EventAddShouldCensor(builder *flatbuffers.Builder, shouldCensor bool) {
	builder.PrependBoolSlot(3, shouldCensor, false)
}
func EventAddWindowId(builder *flatbuffers.Builder, windowId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(windowId), 0)
}
func EventAddSequence(builder *flatbuffers.Builder, sequence int64) {
	builder.PrependInt64Slot(5, sequence, 0)
}
func EventAddSequenceIndex(builder *flatbuffers.Builder, sequenceIndex int32) {
	builder.PrependInt32Slot(6, sequenceIndex, 0)
}
func EventAddParentWindowId(builder *flatbuffers.Builder, parentWindowId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(parentWindowId), 0)
}
func EventEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
